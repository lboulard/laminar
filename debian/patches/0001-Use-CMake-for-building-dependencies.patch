From 6028308d85ecd1c90634b9b054e7dae365c0c8a6 Mon Sep 17 00:00:00 2001
From: Laurent Boulard <laurent.boulard@gmail.com>
Date: Sun, 1 Jul 2018 17:04:41 +0200
Subject: [PATCH 1/1] Use CMake for building dependencies

---
 CMakeLists.txt | 52 ++++++++++++++++++++++++++++++++++++--------------
 external.cmake | 43 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 81 insertions(+), 14 deletions(-)
 create mode 100644 external.cmake

--- laminar.orig/CMakeLists.txt
+++ laminar/CMakeLists.txt
@@ -16,10 +16,23 @@
 ### You should have received a copy of the GNU General Public License
 ### along with Laminar.  If not, see <http://www.gnu.org/licenses/>
 ###
-project(laminar)
-cmake_minimum_required(VERSION 2.8)
+cmake_minimum_required(VERSION 3.5)
 cmake_policy(SET CMP0058 NEW)
 
+set(BUILD_TESTS FALSE CACHE BOOL "Build tests")
+option (USE_SUPERBUILD "Whether or not a superbuild should be invoked" ON)
+
+if (USE_SUPERBUILD)
+  project (SUPERBUILD NONE)
+  # execute the superbuild (this script will be invoked again without the
+  # USE_SUPERBUILD option this time)
+  include (external.cmake)
+  return()
+else()
+  project(laminar)
+endif()
+
+
 set(CMAKE_INCLUDE_CURRENT_DIR ON)
 
 add_definitions("-std=c++11 -Wall -Wextra -Wno-unused-parameter -Wno-sign-compare")
@@ -50,12 +63,6 @@ macro(generate_compressed_bins BASEDIR)
     endforeach()
 endmacro()
 
-# Generates Cap'n Proto interface from definition file
-add_custom_command(OUTPUT laminar.capnp.c++ laminar.capnp.h
-    COMMAND capnp compile -oc++:${CMAKE_BINARY_DIR}
-    --src-prefix=${CMAKE_SOURCE_DIR}/src ${CMAKE_SOURCE_DIR}/src/laminar.capnp
-    DEPENDS src/laminar.capnp)
-
 # Zip and compile statically served resources
 generate_compressed_bins(${CMAKE_SOURCE_DIR}/src/resources index.html js/app.js
     favicon.ico favicon-152.png icon.png)
@@ -78,23 +85,40 @@ generate_compressed_bins(${CMAKE_BINARY_
     js/ansi_up.js js/Chart.min.js js/Chart.HorizontalBar.js css/bootstrap.min.css)
 # (see resources.cpp where these are fetched)
 
+find_package(CapnProto CONFIG REQUIRED)
+
+# Generates Cap'n Proto interface from definition file
+set(CAPNPC_SRC_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}/src")
+capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS src/laminar.capnp)
+
 ## Server
 add_executable(laminard src/database.cpp src/main.cpp src/server.cpp src/laminar.cpp
-    src/conf.cpp src/resources.cpp src/run.cpp laminar.capnp.c++ ${COMPRESSED_BINS})
+    src/conf.cpp src/resources.cpp src/run.cpp ${CAPNP_SRCS} ${COMPRESSED_BINS})
 # TODO: some alternative to boost::filesystem?
-target_link_libraries(laminard capnp-rpc capnp kj-async kj pthread boost_filesystem boost_system sqlite3 z)
+target_link_libraries(laminard PRIVATE CapnProto::capnp-rpc PRIVATE CapnProto::capnp
+    PRIVATE CapnProto::kj PRIVATE CapnProto::kj-async
+    boost_filesystem boost_system sqlite3 z)
 
 ## Client
-add_executable(laminarc src/client.cpp laminar.capnp.c++)
-target_link_libraries(laminarc capnp-rpc capnp kj-async kj pthread)
+add_executable(laminarc src/client.cpp ${CAPNP_SRCS})
+target_link_libraries(laminarc PRIVATE CapnProto::capnp-rpc PRIVATE CapnProto::capnp
+    PRIVATE CapnProto::kj PRIVATE CapnProto::kj-async)
 
 ## Tests
-set(BUILD_TESTS FALSE CACHE BOOL "Build tests")
 if(BUILD_TESTS)
     find_package(GTest REQUIRED)
+    find_library(GMOCK_LIBRARY
+        NAMES gmock
+        HINTS ENV GMOCK_ROOT ${GMOCK_ROOT} ENV GTEST_ROOT ${GTEST_ROOT}
+        PATH_SUFFIXES . lib
+        )
     include_directories(${GTEST_INCLUDE_DIRS} src)
-    add_executable(laminar-tests src/conf.cpp src/database.cpp src/laminar.cpp src/run.cpp src/server.cpp laminar.capnp.c++ src/resources.cpp ${COMPRESSED_BINS} test/test-conf.cpp test/test-database.cpp test/test-laminar.cpp test/test-run.cpp test/test-server.cpp)
-    target_link_libraries(laminar-tests ${GTEST_BOTH_LIBRARIES} gmock capnp-rpc capnp kj-async kj pthread boost_filesystem boost_system sqlite3 z)
+    add_executable(laminar-tests src/conf.cpp src/database.cpp src/laminar.cpp src/run.cpp src/server.cpp ${CAPNP_SRCS} src/resources.cpp ${COMPRESSED_BINS} test/test-conf.cpp test/test-database.cpp test/test-laminar.cpp test/test-run.cpp test/test-server.cpp)
+    target_link_libraries(laminar-tests
+        PRIVATE CapnProto::capnp-rpc PRIVATE CapnProto::capnp
+        PRIVATE CapnProto::kj PRIVATE CapnProto::kj-async
+        ${GTEST_BOTH_LIBRARIES} ${GMOCK_LIBRARY}
+        boost_filesystem boost_system sqlite3 z)
 endif()
 
 set(SYSTEMD_UNITDIR /lib/systemd/system CACHE PATH "Path to systemd unit files")
--- /dev/null
+++ laminar/external.cmake
@@ -0,0 +1,50 @@
+include(ExternalProject)
+
+set_property (DIRECTORY PROPERTY EP_BASE external)
+
+set (DEPENDENCIES)
+set (EXTRA_CMAKE_ARGS)
+
+# GoogleTest/GoogleMock
+list (APPEND DEPENDENCIES gtest)
+ExternalProject_Add(
+    gtest
+    DOWNLOAD_NAME googletest.tar.gz
+    URL https://github.com/google/googletest/archive/release-1.8.0.tar.gz
+    URL_HASH SHA1=e7e646a6204638fe8e87e165292b8dd9cd4c36ed
+    CMAKE_ARGS "-DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/external/Install/gtest"
+    )
+ExternalProject_Get_Property(gtest INSTALL_DIR)
+
+list (APPEND EXTRA_CMAKE_ARGS
+    "-DGTEST_ROOT=${INSTALL_DIR}"
+    )
+
+
+
+# CapnProto
+list (APPEND DEPENDENCIES capnproto)
+ExternalProject_Add(
+    capnproto
+    DOWNLOAD_NAME capnproto.tar.gz
+    URL https://github.com/capnproto/capnproto/archive/3079784bfaf3ba05edacfc63d6d494b76a85a3a5.tar.gz
+    URL_HASH MD5=c5c04c1892a381e30bd032a6bceef111
+    CMAKE_ARGS "-DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/external/Install/capnproto"
+        -DCMAKE_BUILD_TYPE=Release
+        -DBUILD_TESTING=OFF
+    )
+ExternalProject_Get_Property(capnproto INSTALL_DIR)
+
+list (APPEND EXTRA_CMAKE_ARGS
+    "-DCapnProto_DIR:PATH=${INSTALL_DIR}/lib/${CMAKE_LIBRARY_PATH}/cmake/CapnProto"
+    )
+
+ExternalProject_Add(rebuild
+    DEPENDS ${DEPENDENCIES}
+    SOURCE_DIR ${PROJECT_SOURCE_DIR}
+    CMAKE_ARGS -DUSE_SUPERBUILD=OFF
+        -DBUILD_TESTS=${BUILD_TESTS}
+        -DCMAKE_LIBRARY_PATH=${CMAKE_LIBRARY_PATH}
+        ${EXTRA_CMAKE_ARGS}
+    INSTALL_COMMAND ""
+    BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
